name: My_RPG_Sender

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  EXECUTABLES: "my_rpg"
  MIRROR_URL: "git@github.com:EpitechPromo2028/B-MUL-200-MPL-2-1-myrpg-elias-josue.hajjar-llauquen.git"

jobs:
  Coding_style_checker:
    if: github.repositoryUrl != 'https://github.com/EpitechPromo2028/B-MUL-200-MPL-2-1-myrpg-elias-josue.hajjar-llauquen'
    runs-on: ubuntu-latest
    timeout-minutes: 4
    container:
      image: ghcr.io/epitech/coding-style-checker:latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Check.sh script
        run: check.sh $(pwd) $(pwd)
      - name: Coding style check
        run: |
          if [ -s coding-style-reports.log ]; then
            while IFS= read -r line
            do
              FILE=$(echo $line | cut -d':' -f1)
              LINE=$(echo $line | cut -d':' -f2)
              MSG=$(echo $line | cut -d':' -f3)
              echo "::error file=$FILE,line=$LINE::$MSG"
            done < coding-style-reports.log
            exit 1
          fi
          rm -f coding-style-reports.log
  
  General_tests:
    runs-on: ubuntu-latest
    needs: [Coding_style_checker]
    timeout-minutes: 10
    defaults:
      run:
        working-directory: ${{ github.workspace }}
    steps:
      - uses: actions/checkout@v4
      - name: Check if my_rpg exist
        run: |
          if [ ! -f Makefile ]; then
            echo "Error: There's no project."
            echo "::set-output name=cancel::true"
            exit 0
          fi
          exit 0
        id: check_project
      - name: Install Valgrind
        if: steps.check_project.outputs.cancel != 'true'
        run: sudo apt install valgrind
      - name: Install CSFML
        if: steps.check_project.outputs.cancel != 'true'
        run: sudo apt install libcsfml-dev
      - name: Run Valgrind
        if: steps.check_project.outputs.cancel != 'true'
        run: make && make clean && echo -e "ls" | valgrind --error-exitcode=1 ./42sh
        timeout-minutes: 2
      - name: Clean
        if: steps.check_project.outputs.cancel != 'true'
        run: make fclean
        timeout-minutes: 2
      - name: Copilation test
        if: steps.check_project.outputs.cancel != 'true'
        run: make
        timeout-minutes: 2
      - name: Clean
        if: steps.check_project.outputs.cancel != 'true'
        run: make clean
      - name: Execution test
        if: steps.check_project.outputs.cancel != 'true'
        run: |
          for file in $EXECUTABLES; do
            if [ ! -x "$file" ]; then
              echo "Error: $file is either missing or not executable."
            exit 1
          fi
            exit 0
          done
      - name: Bonus test
        if: steps.check_project.outputs.cancel != 'true'
        run: make tests_run
        timeout-minutes: 2

  Send_to_repisitory:
    needs: [General_tests]
    if: ${{ needs.General_tests.result == 'success' }}
    timeout-minutes: 4
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: pixta-dev/repository-mirroring-action@v1
        with:
          target_repo_url: ${{ env.MIRROR_URL }}
          ssh_private_key: ${{ secrets.SSH_PRIVATE_KEY }}